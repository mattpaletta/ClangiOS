cmake_minimum_required (VERSION 3.16)
project(clang-parse LANGUAGES CXX C)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

find_program(PATCH patch REQUIRED)
if (NOT TARGET clangAST)
    # Patch returns 0 if already applied, and higher values if error
    execute_process(COMMAND ${PATCH} -i ${CMAKE_CURRENT_SOURCE_DIR}/patches/clang.patch -p 1 --verbose
                    COMMAND_ECHO STDOUT
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/third_party/llvm-project)
endif()

set(LLVM_ENABLE_PROJECTS "clang;mlir" CACHE STRING "")
set(LLVM_INCLUDE_TESTS OFF)
#set(LLVM_INCLUDE_GO_TESTS OFF)
#set(LLVM_INCLUDE_DOCS OFF)
#set(LLVM_ENABLE_OCAMLDOC OFF)
#set(LLVM_INCLUDE_EXAMPLES OFF)
#set(LLVM_INCLUDE_BENCHMARKS OFF)
#set(LLVM_INCLUDE_TOOLS OFF)
#set(LLVM_INCLUDE_UTILS OFF)
set(LLVM_BUILD_TOOLS OFF CACHE BOOL "" FORCE)
set(LLVM_BUILD_UTILS OFF CACHE BOOL "" FORCE)
#set(LLVM_INCLUDE_RUNTIMES ON)
set(CLANG_BUILD_TOOLS OFF CACHE BOOL "" FORCE)
set(CLANG_BUILD_UTILS OFF CACHE BOOL "" FORCE)
set(LLVM_INSTALL_TOOLCHAIN_ONLY ON CACHE BOOL "" FORCE)
set(MLIR_INCLUDE_TESTS OFF)
set(MLIR_INCLUDE_INTEGRATION_TESTS OFF)
##set(CLANG_ENABLE_STATIC_ANALYZER OFF)
#set(CLANG_ENABLE_ARCMT OFF)
add_subdirectory(third_party/llvm-project/llvm EXCLUDE_FROM_ALL)

add_library(AppClangParse SHARED src/AppClangParse.cpp)
target_link_libraries(AppClangParse PRIVATE clangASTMatchers)
target_include_directories(AppClangParse PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/third_party/llvm-project/clang/include)
target_include_directories(AppClangParse PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/third_party/llvm-project/llvm/include)
target_include_directories(AppClangParse PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/third_party/llvm-project/llvm/tools/clang/include)
target_include_directories(AppClangParse PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/third_party/llvm-project/llvm/include)

if (TARGET MLIRArithOpsIncGen)
	add_dependencies(MLIRArithOpsIncGen MLIRArithOpsInterfacesIncGen)
endif()
if (TARGET mlir-linalg-ods-yaml-gen-host AND TARGET MLIR_LINALG_ODS_YAML_GEN_TARGET)
    add_dependencies(MLIR_LINALG_ODS_YAML_GEN_TARGET mlir-linalg-ods-yaml-gen-host)
endif()
if (TARGET MLIRLinalgNamedStructuredOpsYamlIncGen)
	add_dependencies(MLIRLinalgNamedStructuredOpsYamlIncGen MLIRLinalgOpsIncGen MLIRLinalgOpsEnumsIncGen)
endif()
if (TARGET MLIRLinalgOpsIncGen)
	add_dependencies(MLIRLinalgOpsIncGen MLIRLinalgOpsEnumsIncGen)
endif()
